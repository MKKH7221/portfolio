{"ast":null,"code":"import { ref } from 'vue';\nimport axios from \"axios\";\nimport useVuelidate from '@vuelidate/core';\nimport { required, alphaNum, numeric } from '@vuelidate/validators';\nexport default {\n  name: 'editUser',\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      form: {\n        id: null,\n        name: null,\n        tel: null,\n        address: null,\n        country: {\n          name: null,\n          code: null\n        }\n      },\n      id: \"\",\n      countryList: [],\n      message: \"\",\n      errMessage: \"\"\n    };\n  },\n  validations() {\n    return {\n      form: {\n        name: {\n          required,\n          alphaNum\n        },\n        address: {\n          required,\n          alphaNum\n        },\n        tel: {\n          required,\n          numeric\n        },\n        country: {\n          code: {\n            required\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.id = this.$route.params.id;\n    this.getResults();\n    this.init();\n  },\n  methods: {\n    getResults() {\n      axios.get('http://localhost:8080/edit/' + this.id).then(response => {\n        this.form = response.data;\n      }).catch(error => {\n        this.errMessage = \"Failed to find user\";\n      });\n    },\n    update() {\n      // alert(JSON.stringify(this.form));\n      this.form.country.name = \"\";\n      axios.post('http://localhost:8080/update', this.form).then(response => {\n        this.form = response.data;\n        this.message = \"The update has been completed\";\n      }).catch(error => {\n        if (error.response.status) {\n          this.errMessage = `update:status: ${error.response.status}, message: ${error.response.data}`;\n        } else {\n          this.errMessage = `Fail to edit user`;\n        }\n      });\n    },\n    init() {\n      axios.get('http://localhost:8080/init').then(response => {\n        this.countryList = response.data;\n      }).catch(error => {\n        if (error.response.status) {\n          this.errMessage = `init:status: ${error.response.status}, message: ${error.response.data}`;\n        } else {\n          this.errMessage = `Fail to get country List`;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","axios","useVuelidate","required","alphaNum","numeric","name","setup","v$","data","form","id","tel","address","country","code","countryList","message","errMessage","validations","created","$route","params","getResults","init","methods","get","then","response","catch","error","update","post","status"],"sources":["/usr/src/app/src/pages/app/Edit.vue"],"sourcesContent":["<template>\n    <div class=\"content\" >\n        <h3>Edit User </h3>    \n        <div class=\"edit\" style=\"float: left;\">\n            <div v-show=\"errMessage\" class=\"alert alert-danger\">{{errMessage}}</div>\n            <div v-show=\"message\" class=\"alert alert-success\">{{ message }}</div>\n            <form @submit.prevent=\"this.update()\">\n                    <!-- id -->\n                    <div class=\"form-group\">\n                        <label class=\"label\" for=\"id\">Id</label>\n                        <input class=\"form-control\" type=\"id\" v-model=\"form.id\" disabled=\"true\"/>\n                    </div>\n\n                    <!-- name -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.name.$errors.length }\">\n                        <label for=\"\">Name</label>\n                        <input class=\"form-control\" placeholder=\"Enter your username\" type=\"name\" v-model=\"v$.form.name.$model\">\n                        <!-- <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div> -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.name.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n                    \n                    <!-- address -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.address.$errors.length }\">\n                        <label for=\"\">Address</label>\n                        <input class=\"form-control\" placeholder=\"Enter your address\" type=\"address\" v-model=\"v$.form.address.$model\">\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.address.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n\n                    <!-- tel -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.tel.$errors.length }\">\n                        <label for=\"\">Tel</label>\n                        <input class=\"form-control\" placeholder=\"Enter your tel\" type=\"tel\" v-model=\"v$.form.tel.$model\">\n                        <!-- error message -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.tel.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n                        \n                    <!-- country -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.country.code.$errors.length }\">\n                        <label for=\"\">Country</label>\n                        <select class=\"form-control\" type=\"country.code\" v-model=\"v$.form.country.code.$model\">\n                            <option value=\"\" placeholder=\"Select a country\" > Select a country </option>\n                            <option v-for=\"country in countryList\" \n                                v-bind:key=\"country.code\" v-bind:value=\"country.code\">\n                                {{ country.name }}\n                            </option>\n                        </select>\n                        <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div>\n                        <!-- error message -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.country.code.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n                    <br>                    \n                    <p class=\"button_align\">\n                        <button type=\"submit\" class=\"btn btn-primary\">Confirm</button>\n                    </p>\n            </form>\n        </div>\n        <div class=\"backto\">\n            <p><router-link to=\"/search\">Go back to Search</router-link></p>\n        </div>\n    </div>\n</template>\n\n\n\n<script>\n  import { ref } from 'vue';\n  import axios from \"axios\";\n  import useVuelidate from '@vuelidate/core'\n  import { required, alphaNum, numeric} from '@vuelidate/validators'\n  export default {\n    name: 'editUser',\n    setup () {\n        return { v$:useVuelidate() }\n    },\n    data(){\n        return{\n            form: {\n                id: null,\n                name: null,\n                tel: null,\n                address: null,\n                country : {\n                    name: null,\n                    code: null\n                }\n            },\n            id : \"\",\n            countryList: [], \n            message : \"\",\n            errMessage :\"\"\n        }\n    },\n    validations() {\n        return {\n            form: {\n                name: {\n                    required,\n                    alphaNum\n                },\n                address: {\n                    required,\n                    alphaNum \n                },\n                tel: {\n                    required,\n                    numeric\n                },\n                country:{\n                    code:{\n                        required \n                    }\n                },\n            },\n        }\n    },\n   created() {\n        this.id = this.$route.params.id;\n        this.getResults();\n        this.init();\n    },\n    methods: {\n        getResults() {\n            axios\n            .get('http://localhost:8080/edit/'+ this.id)\n            .then(\n                response => {this.form = response.data;} \n            ).catch(\n                error => { this.errMessage = \"Failed to find user\"; }\n            );    \n        },\n        update() {\n            // alert(JSON.stringify(this.form));\n            this.form.country.name = \"\";\n            axios\n            .post('http://localhost:8080/update', this.form)\n            .then(\n                response => {\n                    this.form = response.data;\n                    this.message=\"The update has been completed\";\n                } \n            ).catch(\n                error => {\n                    if (error.response.status) {\n                        this.errMessage = `update:status: ${error.response.status}, message: ${error.response.data}`;\n                    } else {\n                        this.errMessage = `Fail to edit user`;\n                    }\n                }\n            );    \n        },\n        init () {\n            axios.get('http://localhost:8080/init')\n            .then (\n                response => {\n                    this.countryList = response.data;\n                } \n            ).catch (\n                error => {\n                    if (error.response.status) {\n                        this.errMessage = `init:status: ${error.response.status}, message: ${error.response.data}`;\n                    } else {\n                        this.errMessage = `Fail to get country List`;\n                    }\n                }\n            ); \n        },\n    }\n  }\n  </script>\n\n<style>\n\n.edit {\n    display: block;\n    width: 60%;\n    border: 0.5px solid #b2b0b0;\n    /* background: #ebeff1; */\n    margin: 40px auto;\n    padding: 20px;\n    box-sizing: border-box;\n}\n.backto {\n    display: block;\n    width: 60%;\n}\n\n</style>\n"],"mappings":"AAyEE,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,YAAW,MAAO,iBAAgB;AACzC,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,QAAO,uBAAsB;AACjE,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAIA,CAAA,EAAK;IACL,OAAO;MAAEC,EAAE,EAACN,YAAY,CAAC;IAAE;EAC/B,CAAC;EACDO,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,IAAI,EAAE;QACFC,EAAE,EAAE,IAAI;QACRL,IAAI,EAAE,IAAI;QACVM,GAAG,EAAE,IAAI;QACTC,OAAO,EAAE,IAAI;QACbC,OAAM,EAAI;UACNR,IAAI,EAAE,IAAI;UACVS,IAAI,EAAE;QACV;MACJ,CAAC;MACDJ,EAAC,EAAI,EAAE;MACPK,WAAW,EAAE,EAAE;MACfC,OAAM,EAAI,EAAE;MACZC,UAAS,EAAG;IAChB;EACJ,CAAC;EACDC,WAAWA,CAAA,EAAG;IACV,OAAO;MACHT,IAAI,EAAE;QACFJ,IAAI,EAAE;UACFH,QAAQ;UACRC;QACJ,CAAC;QACDS,OAAO,EAAE;UACLV,QAAQ;UACRC;QACJ,CAAC;QACDQ,GAAG,EAAE;UACDT,QAAQ;UACRE;QACJ,CAAC;QACDS,OAAO,EAAC;UACJC,IAAI,EAAC;YACDZ;UACJ;QACJ;MACJ;IACJ;EACJ,CAAC;EACFiB,OAAOA,CAAA,EAAG;IACL,IAAI,CAACT,EAAC,GAAI,IAAI,CAACU,MAAM,CAACC,MAAM,CAACX,EAAE;IAC/B,IAAI,CAACY,UAAU,CAAC,CAAC;IACjB,IAAI,CAACC,IAAI,CAAC,CAAC;EACf,CAAC;EACDC,OAAO,EAAE;IACLF,UAAUA,CAAA,EAAG;MACTtB,KAAI,CACHyB,GAAG,CAAC,6BAA6B,GAAE,IAAI,CAACf,EAAE,EAC1CgB,IAAI,CACDC,QAAO,IAAK;QAAC,IAAI,CAAClB,IAAG,GAAIkB,QAAQ,CAACnB,IAAI;MAAC,CAC3C,CAAC,CAACoB,KAAK,CACHC,KAAI,IAAK;QAAE,IAAI,CAACZ,UAAS,GAAI,qBAAqB;MAAE,CACxD,CAAC;IACL,CAAC;IACDa,MAAMA,CAAA,EAAG;MACL;MACA,IAAI,CAACrB,IAAI,CAACI,OAAO,CAACR,IAAG,GAAI,EAAE;MAC3BL,KAAI,CACH+B,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAACtB,IAAI,EAC9CiB,IAAI,CACDC,QAAO,IAAK;QACR,IAAI,CAAClB,IAAG,GAAIkB,QAAQ,CAACnB,IAAI;QACzB,IAAI,CAACQ,OAAO,GAAC,+BAA+B;MAChD,CACJ,CAAC,CAACY,KAAK,CACHC,KAAI,IAAK;QACL,IAAIA,KAAK,CAACF,QAAQ,CAACK,MAAM,EAAE;UACvB,IAAI,CAACf,UAAS,GAAK,kBAAiBY,KAAK,CAACF,QAAQ,CAACK,MAAO,cAAaH,KAAK,CAACF,QAAQ,CAACnB,IAAK,EAAC;QAChG,OAAO;UACH,IAAI,CAACS,UAAS,GAAK,mBAAkB;QACzC;MACJ,CACJ,CAAC;IACL,CAAC;IACDM,IAAGA,CAAA,EAAK;MACJvB,KAAK,CAACyB,GAAG,CAAC,4BAA4B,EACrCC,IAAG,CACAC,QAAO,IAAK;QACR,IAAI,CAACZ,WAAU,GAAIY,QAAQ,CAACnB,IAAI;MACpC,CACJ,CAAC,CAACoB,KAAI,CACFC,KAAI,IAAK;QACL,IAAIA,KAAK,CAACF,QAAQ,CAACK,MAAM,EAAE;UACvB,IAAI,CAACf,UAAS,GAAK,gBAAeY,KAAK,CAACF,QAAQ,CAACK,MAAO,cAAaH,KAAK,CAACF,QAAQ,CAACnB,IAAK,EAAC;QAC9F,OAAO;UACH,IAAI,CAACS,UAAS,GAAK,0BAAyB;QAChD;MACJ,CACJ,CAAC;IACL;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}