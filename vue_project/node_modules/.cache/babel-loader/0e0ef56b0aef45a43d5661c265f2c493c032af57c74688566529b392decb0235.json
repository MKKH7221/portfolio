{"ast":null,"code":"import { ref } from 'vue';\nimport axios from \"axios\";\nimport useVuelidate from '@vuelidate/core';\nimport { required, numeric, maxLength, helpers } from '@vuelidate/validators';\nconst alphaSpace = helpers.regex(/^[a-zA-Z ]*$/);\nconst alphaSpaceNumComma = helpers.regex(/^[a-zA-Z0-9 ,]*$/);\nexport default {\n  name: 'addUser',\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      form: {\n        name: \"\",\n        address: \"\",\n        tel: \"\",\n        countryCode: \"\"\n      },\n      errMessage: \"\",\n      message: \"\",\n      countryList: []\n    };\n  },\n  validations() {\n    return {\n      form: {\n        name: {\n          required,\n          maxLength: maxLength(20),\n          alphaSpace: helpers.withMessage('You can use only alphabet and space', alphaSpace)\n        },\n        address: {\n          required,\n          alphaSpaceNumComma: helpers.withMessage('You can use only alphabet, space and comma', alphaSpaceNumComma)\n        },\n        tel: {\n          required,\n          numeric,\n          maxLength: maxLength(10)\n        },\n        countryCode: {\n          required\n        }\n      }\n    };\n  },\n  created() {\n    this.init();\n  },\n  methods: {\n    addUser() {\n      axios.post(\"http://localhost:8080/add\", this.form).then(response => {\n        this.form.name = null;\n        this.form.address = null;\n        this.form.countryCode = null;\n        this.form.tel = null;\n        this.message = \"The user have successfully created\";\n      }).catch(error => {\n        if (error.response.status) {\n          this.message = `status: ${error.response.status}, message: ${error.response.data}`;\n        } else {\n          this.message = `Failed to create user`;\n        }\n      });\n    },\n    init() {\n      axios.get('http://localhost:8080/init').then(response => {\n        this.countryList = response.data;\n      }).catch(error => {\n        this.errMessage = `Faild to get countryList`;\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","axios","useVuelidate","required","numeric","maxLength","helpers","alphaSpace","regex","alphaSpaceNumComma","name","setup","v$","data","form","address","tel","countryCode","errMessage","message","countryList","validations","withMessage","created","init","methods","addUser","post","then","response","catch","error","status","get"],"sources":["/usr/src/app/src/pages/app/Add.vue"],"sourcesContent":["<template>\n  <div class=\"content\">\n      <h3>Create User</h3>\n      <div class=\"create\">\n        <div v-show=\"errMessage\" class=\"alert alert-danger\">{{errMessage}}</div>\n        <div v-show=\"message\" class=\"alert alert-success\">{{ message }}</div>\n        <form v-on:submit.prevent=\"addUser\">\n          <!-- name -->\n          <div class=\"form-group\" :class=\"{ error: v$.form.name.$errors.length }\">\n              <label for=\"\">Name</label>\n              <input class=\"form-control\" placeholder=\"Enter your username\" type=\"name\" v-model=\"v$.form.name.$model\">\n              <div class=\"input-errors\" v-for=\"(error, index) of v$.form.name.$errors\" :key=\"index\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n              </div>\n          </div>\n          <br>\n          <!-- address -->\n          <div class=\"form-group\" :class=\"{ error: v$.form.address.$errors.length }\">\n              <label for=\"\">Address</label>\n              <input class=\"form-control\" placeholder=\"Enter your address\" type=\"address\" v-model=\"v$.form.address.$model\">\n              <div class=\"input-errors\" v-for=\"(error, index) of v$.form.address.$errors\" :key=\"index\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n              </div>\n          </div>\n          <br>\n          <!-- tel -->\n          <div class=\"form-group\" :class=\"{ error: v$.form.tel.$errors.length }\">\n              <label for=\"\">Tel</label>\n              <input class=\"form-control\" placeholder=\"Enter your tel\" type=\"tel\" v-model=\"v$.form.tel.$model\">\n              <div class=\"input-errors\" v-for=\"(error, index) of v$.form.tel.$errors\" :key=\"index\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n              </div>\n          </div>\n          <br>\n          <!-- country -->\n          <div class=\"form-group\" :class=\"{ error: v$.form.countryCode.$errors.length }\">\n              <label for=\"\">Country</label>\n              <select class=\"form-control\" type=\"countryCode\" v-model=\"v$.form.countryCode.$model\">\n                  <option value=\"\" placeholder=\"Select a country\" > Select a country </option>\n                  <option v-for=\"country in countryList\" \n                      v-bind:key=\"country.code\" v-bind:value=\"country.code\">\n                      {{ country.name }}\n                  </option>\n              </select>\n              <div class=\"input-errors\" v-for=\"(error, index) of v$.form.countryCode.$errors\" :key=\"index\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n              </div>\n          </div>\n          <br>                    \n          <p class=\"button_align\">\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"v$.$invalid\">Create</button>\n          </p>\n        </form>\n      </div>\n  </div>\n</template>\n  \n  <script>\n  import { ref } from 'vue';\n  import axios from \"axios\";\n  import useVuelidate from '@vuelidate/core'\n  import { required, numeric, maxLength, helpers} from '@vuelidate/validators'\n  const alphaSpace = helpers.regex(/^[a-zA-Z ]*$/)\n  const alphaSpaceNumComma = helpers.regex(/^[a-zA-Z0-9 ,]*$/)\n\n  export default {\n    name: 'addUser',\n    setup () {\n        return { v$:useVuelidate() }\n    },\n    data(){\n        return{\n          form: {\n            name: \"\",\n            address: \"\",\n            tel: \"\",\n            countryCode: \"\"\n          },   \n          errMessage : \"\",\n          message : \"\",\n          countryList: []\n        }\n    },\n    validations() {\n        return {\n            form: {\n                name: {\n                  required,\n                  maxLength: maxLength(20),\n                  alphaSpace: helpers.withMessage('You can use only alphabet and space', alphaSpace),\n                },\n                address: {\n                  required,\n                  alphaSpaceNumComma: helpers.withMessage('You can use only alphabet, space and comma', alphaSpaceNumComma),\n                },\n                tel: {\n                  required,\n                  numeric,\n                  maxLength: maxLength(10),\n                },\n                countryCode:{\n                  required\n                },\n            },\n        }\n    },\n    created() {\n        this.init();\n    },\n    methods: {\n        addUser() {\n          axios\n          .post(\"http://localhost:8080/add\", this.form)\n          .then(\n            response => {\n              this.form.name = null;\n              this.form.address = null;\n              this.form.countryCode = null;\n              this.form.tel = null;\n              this.message = \"The user have successfully created\";\n            } \n          ).catch(\n            error => {\n                if (error.response.status) {\n                  this.message = `status: ${error.response.status}, message: ${error.response.data}`;\n                } else {\n                  this.message = `Failed to create user`;\n                }\n            }\n          );    \n        },\n        init () {\n            axios.get('http://localhost:8080/init')\n            .then (\n                response => {\n                    this.countryList = response.data;\n                } \n            ).catch (\n                error => {\n                    this.errMessage = `Faild to get countryList`;\n                }\n            ); \n        }\n    }\n    \n  }\n  </script>\n  \n  <style>\n  .create {\n    display: block;\n    width: 60%;\n    border: 0.5px solid #b2b0b0;\n    /* background: #ebeff1; */\n    margin: 20px auto;\n    padding: 20px;\n    box-sizing: border-box;\n}\n.backto {\n    display: block;\n    width: 60%;\n}\n</style>\n  "],"mappings":"AA0DE,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,YAAW,MAAO,iBAAgB;AACzC,SAASC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAEC,OAAO,QAAO,uBAAsB;AAC3E,MAAMC,UAAS,GAAID,OAAO,CAACE,KAAK,CAAC,cAAc;AAC/C,MAAMC,kBAAiB,GAAIH,OAAO,CAACE,KAAK,CAAC,kBAAkB;AAE3D,eAAe;EACbE,IAAI,EAAE,SAAS;EACfC,KAAIA,CAAA,EAAK;IACL,OAAO;MAAEC,EAAE,EAACV,YAAY,CAAC;IAAE;EAC/B,CAAC;EACDW,IAAIA,CAAA,EAAE;IACF,OAAM;MACJC,IAAI,EAAE;QACJJ,IAAI,EAAE,EAAE;QACRK,OAAO,EAAE,EAAE;QACXC,GAAG,EAAE,EAAE;QACPC,WAAW,EAAE;MACf,CAAC;MACDC,UAAS,EAAI,EAAE;MACfC,OAAM,EAAI,EAAE;MACZC,WAAW,EAAE;IACf;EACJ,CAAC;EACDC,WAAWA,CAAA,EAAG;IACV,OAAO;MACHP,IAAI,EAAE;QACFJ,IAAI,EAAE;UACJP,QAAQ;UACRE,SAAS,EAAEA,SAAS,CAAC,EAAE,CAAC;UACxBE,UAAU,EAAED,OAAO,CAACgB,WAAW,CAAC,qCAAqC,EAAEf,UAAU;QACnF,CAAC;QACDQ,OAAO,EAAE;UACPZ,QAAQ;UACRM,kBAAkB,EAAEH,OAAO,CAACgB,WAAW,CAAC,4CAA4C,EAAEb,kBAAkB;QAC1G,CAAC;QACDO,GAAG,EAAE;UACHb,QAAQ;UACRC,OAAO;UACPC,SAAS,EAAEA,SAAS,CAAC,EAAE;QACzB,CAAC;QACDY,WAAW,EAAC;UACVd;QACF;MACJ;IACJ;EACJ,CAAC;EACDoB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,IAAI,CAAC,CAAC;EACf,CAAC;EACDC,OAAO,EAAE;IACLC,OAAOA,CAAA,EAAG;MACRzB,KAAI,CACH0B,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAACb,IAAI,EAC3Cc,IAAI,CACHC,QAAO,IAAK;QACV,IAAI,CAACf,IAAI,CAACJ,IAAG,GAAI,IAAI;QACrB,IAAI,CAACI,IAAI,CAACC,OAAM,GAAI,IAAI;QACxB,IAAI,CAACD,IAAI,CAACG,WAAU,GAAI,IAAI;QAC5B,IAAI,CAACH,IAAI,CAACE,GAAE,GAAI,IAAI;QACpB,IAAI,CAACG,OAAM,GAAI,oCAAoC;MACrD,CACF,CAAC,CAACW,KAAK,CACLC,KAAI,IAAK;QACL,IAAIA,KAAK,CAACF,QAAQ,CAACG,MAAM,EAAE;UACzB,IAAI,CAACb,OAAM,GAAK,WAAUY,KAAK,CAACF,QAAQ,CAACG,MAAO,cAAaD,KAAK,CAACF,QAAQ,CAAChB,IAAK,EAAC;QACpF,OAAO;UACL,IAAI,CAACM,OAAM,GAAK,uBAAsB;QACxC;MACJ,CACF,CAAC;IACH,CAAC;IACDK,IAAGA,CAAA,EAAK;MACJvB,KAAK,CAACgC,GAAG,CAAC,4BAA4B,EACrCL,IAAG,CACAC,QAAO,IAAK;QACR,IAAI,CAACT,WAAU,GAAIS,QAAQ,CAAChB,IAAI;MACpC,CACJ,CAAC,CAACiB,KAAI,CACFC,KAAI,IAAK;QACL,IAAI,CAACb,UAAS,GAAK,0BAAyB;MAChD,CACJ,CAAC;IACL;EACJ;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}