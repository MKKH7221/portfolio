{"ast":null,"code":"import { ref } from 'vue';\nimport axios from \"axios\";\nimport useVuelidate from '@vuelidate/core';\nimport { required } from '@vuelidate/validators';\nexport default {\n  name: 'editUser',\n  // props: {\n  //   id: String\n  // },\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      form: {\n        id: null,\n        name: null,\n        tel: null,\n        address: null,\n        country: {\n          name: null,\n          code: null\n        }\n      },\n      id: \"\",\n      countryList: [],\n      message: \"\",\n      errMessage: \"\"\n    };\n  },\n  validations() {\n    return {\n      form: {\n        name: {\n          required\n        },\n        address: {\n          required\n        },\n        tel: {\n          required\n        },\n        country: {\n          code: {\n            required\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.id = this.$route.params.id;\n    this.getResults();\n    this.init();\n  },\n  methods: {\n    //--- \n    onSubmit(values) {\n      console.log(JSON.stringify(this.form));\n    },\n    //--       \n    getResults() {\n      axios.get('http://localhost:8080/edit/' + this.id).then(response => {\n        this.form = response.data;\n      }).catch(error => {\n        this.errMessage = \"Failed to find user\";\n      });\n    },\n    update() {\n      alert(JSON.stringify(this.form));\n      this.form.country.name = \"\";\n      axios.post('http://localhost:8080/update', this.form).then(response => {\n        this.form = response.data;\n        this.message = \"The update has been completed\";\n      }).catch(error => {\n        if (error.response.status) {\n          this.errMessage = `update:status: ${error.response.status}, message: ${error.response.data}`;\n        } else {\n          this.errMessage = `Fail to edit user`;\n        }\n      });\n    },\n    init() {\n      axios.get('http://localhost:8080/init').then(response => {\n        this.countryList = response.data;\n      }).catch(error => {\n        if (error.response.status) {\n          this.errMessage = `init:status: ${error.response.status}, message: ${error.response.data}`;\n        } else {\n          this.errMessage = `Fail to get country List`;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","axios","useVuelidate","required","name","setup","v$","data","form","id","tel","address","country","code","countryList","message","errMessage","validations","created","$route","params","getResults","init","methods","onSubmit","values","console","log","JSON","stringify","get","then","response","catch","error","update","alert","post","status"],"sources":["/usr/src/app/src/pages/app/Edit.vue"],"sourcesContent":["<template>\n    <div class=\"content\">\n        <h3>Edit User </h3>    \n        <div v-show=\"errMessage\" class=\"alert alert-danger\">{{errMessage}}</div>\n        <div v-show=\"message\" class=\"alert alert-success\">{{ message }}</div>\n        <div id=\"app\">\n            <!-- <form> -->\n            <form @submit=\"this.update()\">\n                <div class=\"edit\">\n                    <!-- Id -->\n                    <div class=\"form-group\">\n                        <label class=\"label\" for=\"id\">Id</label>\n                        <input class=\"form-control\" type=\"id\" v-model=\"form.id\" disabled=\"true\"/>\n                    </div>\n\n                    <!-- name -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.name.$errors.length }\">\n                        <label for=\"\">Name</label>\n                        <input class=\"form-control\" placeholder=\"Enter your username\" type=\"name\" v-model=\"v$.form.name.$model\">\n                        <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div>\n                            <!-- error message -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.name.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n                    \n                    <!-- address -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.address.$errors.length }\">\n                        <label for=\"\">Address</label>\n                        <input class=\"form-control\" placeholder=\"Enter your address\" type=\"address\" v-model=\"v$.form.address.$model\">\n                        <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div>\n                            <!-- error message -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.address.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n\n                    <!-- tel -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.tel.$errors.length }\">\n                        <label for=\"\">Tel</label>\n                        <input class=\"form-control\" placeholder=\"Enter your tel\" type=\"tel\" v-model=\"v$.form.tel.$model\">\n                        <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div>\n                            <!-- error message -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.tel.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n                        \n                    <!-- country -->\n                    <div class=\"form-group\" :class=\"{ error: v$.form.country.code.$errors.length }\">\n                        <label for=\"\">Country</label>\n                        <select class=\"form-control\" type=\"country.code\" v-model=\"v$.form.country.code.$model\">\n                            <option value=\"\" placeholder=\"Select a country\" > Select a country </option>\n                            <option v-for=\"country in countryList\" \n                                v-bind:key=\"country.code\" v-bind:value=\"country.code\">\n                                {{ country.name }}\n                            </option>\n                        </select>\n                        <div class=\"pre-icon os-icon os-icon-user-male-circle\"></div>\n                            <!-- error message -->\n                        <div class=\"input-errors\" v-for=\"(error, index) of v$.form.country.code.$errors\" :key=\"index\">\n                            <div class=\"error-msg\">{{ error.$message }}</div>\n                        </div>\n                    </div>\n                    <p class=\"button_align\">\n                        <button type=\"submit\" class=\"btn btn-primary\">Confirm</button>\n                    </p>\n                </div>\n            </form>\n        </div>\n        <p><router-link to=\"/search\">Go to Search</router-link></p>\n        \n\n    </div>\n</template>\n\n\n\n<script>\n  import { ref } from 'vue';\n  import axios from \"axios\";\n  import useVuelidate from '@vuelidate/core'\n  import { required } from '@vuelidate/validators'\n  export default {\n    name: 'editUser',\n    // props: {\n    //   id: String\n    // },\n    setup () {\n        return { v$:useVuelidate() }\n    },\n    data(){\n        return{\n            form: {\n                id: null,\n                name: null,\n                tel: null,\n                address: null,\n                country : {\n                    name: null,\n                    code: null\n                }\n            },\n            id : \"\",\n            countryList: [], \n            message : \"\",\n            errMessage :\"\"\n        }\n    },\n    validations() {\n        return {\n            form: {\n                name: {\n                    required\n                },\n                address: {\n                    required \n                },\n                tel: {\n                    required \n                },\n                country:{\n                    code:{\n                        required \n                    }\n                },\n            },\n        }\n    },\n\n    created() {\n        this.id = this.$route.params.id;\n        this.getResults();\n        this.init();\n    },\n    methods: {\n//--- \n        onSubmit(values) {\n            console.log(JSON.stringify(this.form));\n        },\n//--       \n        getResults() {\n            axios\n            .get('http://localhost:8080/edit/'+ this.id)\n            .then(\n                response => {this.form = response.data;} \n            ).catch(\n                error => { this.errMessage = \"Failed to find user\"; }\n            );    \n        },\n        update() {\n            alert(JSON.stringify(this.form));\n            this.form.country.name = \"\";\n            axios\n            .post('http://localhost:8080/update', this.form)\n            .then(\n                response => {\n                    this.form = response.data;\n                    this.message=\"The update has been completed\";\n                } \n            ).catch(\n                error => {\n                    if (error.response.status) {\n                        this.errMessage = `update:status: ${error.response.status}, message: ${error.response.data}`;\n                    } else {\n                        this.errMessage = `Fail to edit user`;\n                    }\n                }\n            );    \n        },\n        init () {\n            axios.get('http://localhost:8080/init')\n            .then (\n                response => {\n                    this.countryList = response.data;\n                } \n            ).catch (\n                error => {\n                    if (error.response.status) {\n                        this.errMessage = `init:status: ${error.response.status}, message: ${error.response.data}`;\n                    } else {\n                        this.errMessage = `Fail to get country List`;\n                    }\n                }\n            ); \n        },\n    }\n  }\n  </script>\n\n<style>\n\n.edit {\n    display: inline-block;\n    width: 60%;\n    border: 0.5px solid #b2b0b0;\n    /* background: #ebeff1; */\n    padding: 10px;\n    box-sizing: border-box;\n}\n\n</style>\n"],"mappings":"AA+EE,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,YAAW,MAAO,iBAAgB;AACzC,SAASC,QAAO,QAAS,uBAAsB;AAC/C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChB;EACA;EACA;EACAC,KAAIA,CAAA,EAAK;IACL,OAAO;MAAEC,EAAE,EAACJ,YAAY,CAAC;IAAE;EAC/B,CAAC;EACDK,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,IAAI,EAAE;QACFC,EAAE,EAAE,IAAI;QACRL,IAAI,EAAE,IAAI;QACVM,GAAG,EAAE,IAAI;QACTC,OAAO,EAAE,IAAI;QACbC,OAAM,EAAI;UACNR,IAAI,EAAE,IAAI;UACVS,IAAI,EAAE;QACV;MACJ,CAAC;MACDJ,EAAC,EAAI,EAAE;MACPK,WAAW,EAAE,EAAE;MACfC,OAAM,EAAI,EAAE;MACZC,UAAS,EAAG;IAChB;EACJ,CAAC;EACDC,WAAWA,CAAA,EAAG;IACV,OAAO;MACHT,IAAI,EAAE;QACFJ,IAAI,EAAE;UACFD;QACJ,CAAC;QACDQ,OAAO,EAAE;UACLR;QACJ,CAAC;QACDO,GAAG,EAAE;UACDP;QACJ,CAAC;QACDS,OAAO,EAAC;UACJC,IAAI,EAAC;YACDV;UACJ;QACJ;MACJ;IACJ;EACJ,CAAC;EAEDe,OAAOA,CAAA,EAAG;IACN,IAAI,CAACT,EAAC,GAAI,IAAI,CAACU,MAAM,CAACC,MAAM,CAACX,EAAE;IAC/B,IAAI,CAACY,UAAU,CAAC,CAAC;IACjB,IAAI,CAACC,IAAI,CAAC,CAAC;EACf,CAAC;EACDC,OAAO,EAAE;IACb;IACQC,QAAQA,CAACC,MAAM,EAAE;MACbC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrB,IAAI,CAAC,CAAC;IAC1C,CAAC;IACT;IACQa,UAAUA,CAAA,EAAG;MACTpB,KAAI,CACH6B,GAAG,CAAC,6BAA6B,GAAE,IAAI,CAACrB,EAAE,EAC1CsB,IAAI,CACDC,QAAO,IAAK;QAAC,IAAI,CAACxB,IAAG,GAAIwB,QAAQ,CAACzB,IAAI;MAAC,CAC3C,CAAC,CAAC0B,KAAK,CACHC,KAAI,IAAK;QAAE,IAAI,CAAClB,UAAS,GAAI,qBAAqB;MAAE,CACxD,CAAC;IACL,CAAC;IACDmB,MAAMA,CAAA,EAAG;MACLC,KAAK,CAACR,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrB,IAAI,CAAC,CAAC;MAChC,IAAI,CAACA,IAAI,CAACI,OAAO,CAACR,IAAG,GAAI,EAAE;MAC3BH,KAAI,CACHoC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC7B,IAAI,EAC9CuB,IAAI,CACDC,QAAO,IAAK;QACR,IAAI,CAACxB,IAAG,GAAIwB,QAAQ,CAACzB,IAAI;QACzB,IAAI,CAACQ,OAAO,GAAC,+BAA+B;MAChD,CACJ,CAAC,CAACkB,KAAK,CACHC,KAAI,IAAK;QACL,IAAIA,KAAK,CAACF,QAAQ,CAACM,MAAM,EAAE;UACvB,IAAI,CAACtB,UAAS,GAAK,kBAAiBkB,KAAK,CAACF,QAAQ,CAACM,MAAO,cAAaJ,KAAK,CAACF,QAAQ,CAACzB,IAAK,EAAC;QAChG,OAAO;UACH,IAAI,CAACS,UAAS,GAAK,mBAAkB;QACzC;MACJ,CACJ,CAAC;IACL,CAAC;IACDM,IAAGA,CAAA,EAAK;MACJrB,KAAK,CAAC6B,GAAG,CAAC,4BAA4B,EACrCC,IAAG,CACAC,QAAO,IAAK;QACR,IAAI,CAAClB,WAAU,GAAIkB,QAAQ,CAACzB,IAAI;MACpC,CACJ,CAAC,CAAC0B,KAAI,CACFC,KAAI,IAAK;QACL,IAAIA,KAAK,CAACF,QAAQ,CAACM,MAAM,EAAE;UACvB,IAAI,CAACtB,UAAS,GAAK,gBAAekB,KAAK,CAACF,QAAQ,CAACM,MAAO,cAAaJ,KAAK,CAACF,QAAQ,CAACzB,IAAK,EAAC;QAC9F,OAAO;UACH,IAAI,CAACS,UAAS,GAAK,0BAAyB;QAChD;MACJ,CACJ,CAAC;IACL;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}