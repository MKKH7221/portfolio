<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.spring_project.infrastructure.datasource.UserMapper">

    <resultMap id="UserResultMap" type="com.example.spring_project.domain.model.user.User">
        <constructor>
            <arg name="id" resultMap="idResultMap" javaType="com.example.spring_project.domain.model.user.Id"/>
            <arg name="name" resultMap="nameResultMap" javaType="com.example.spring_project.domain.model.user.Name"/>
            <arg name="address" resultMap="addressResultMap" javaType="com.example.spring_project.domain.model.user.Address"/>
            <arg name="tel" resultMap="telResultMap" javaType="com.example.spring_project.domain.model.user.Tel"/>
            <arg name="country" resultMap="countryResultMap" javaType="com.example.spring_project.domain.model.country.Country"/>
        </constructor>
    </resultMap>
    
    <resultMap id="idResultMap" type="com.example.spring_project.domain.model.user.Id">
        <constructor>
            <arg name="value" column="id" javaType="Integer"/>
        </constructor>
    </resultMap>
    <resultMap id="nameResultMap" type="com.example.spring_project.domain.model.user.Name">
        <constructor>
            <arg name="value" column="name" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="addressResultMap" type="com.example.spring_project.domain.model.user.Address">
        <constructor>
            <arg name="value" column="address" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="telResultMap" type="com.example.spring_project.domain.model.user.Tel">
        <constructor>
            <arg name="value" column="tel" javaType="String"/>
        </constructor>
    </resultMap>
    <resultMap id="countryResultMap" type="com.example.spring_project.domain.model.country.Country">
        <constructor>
            <arg name="name" column="countryName" javaType="String"/>
            <arg name="code" column="countryCode" javaType="String"/>
        </constructor>
    </resultMap>
    <select id="findAll" resultMap="UserResultMap">
        SELECT 
            user.id, 
            user.name, 
            user.address, 
            user.tel, 
            country.name as countryName,
            country.code as countryCode
        FROM 
            user
        INNER JOIN country 
            ON user.country = country.code
    </select>

    <select id="findByCondition" resultMap="UserResultMap">
        SELECT 
            user.id, 
            user.name, 
            user.address, 
            user.tel, 
            country.name as countryName,
            country.code as countryCode
        FROM 
            user
        INNER JOIN country 
            ON user.country = country.code
         <where>
            <if test="id != null">
                user.id = #{id}
            </if>
            <if test="name != null">
                AND user.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="address != null">
                AND user.address LIKE CONCAT('%', #{address}, '%')
            </if>
            <if test="tel != null">
                AND user.tel LIKE CONCAT('%', #{tel}, '%')
            </if>
            <if test="countryCode != null">
                AND country.code = #{countryCode}
            </if>
        </where> 
    </select>
    <select id="findById" resultMap="UserResultMap">
        SELECT 
            user.id, 
            user.name, 
            user.address, 
            user.tel, 
            country.name as countryName,
            country.code as countryCode
        FROM 
            user
        INNER JOIN country 
            ON user.country = country.code
        WHERE id = #{id}
    </select>

    <update id="update">
        UPDATE 
            user 
        SET 
            name = #{name.value}, 
            address = #{address.value}, 
            tel = #{tel.value},
            country = #{country.code}
        WHERE 
            id = #{id.value}
    </update>
    <insert id="add">
        INSERT INTO user(
            name, 
            address, 
            tel, 
            country
        ) 
        VALUES (
            #{name.value},
            #{address.value}, 
            #{tel.value} ,
            #{country.code}
        ) 
    </insert>
    <delete id="delete">
        DELETE FROM user WHERE id = #{id}
    </delete>
</mapper>
